library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity multiplierTB is
end entity multiplierTB;

architecture tb_arch of multiplierTB is
    -- Component Declaration for the Unit Under Test (UUT)
    component multiplier
        port (
            A, B : in std_logic_vector(3 downto 0);
            P    : out std_logic_vector(7 downto 0)
        );
    end component;

    -- Testbench Signals
    signal A_tb, B_tb : std_logic_vector(3 downto 0);
    signal P_tb       : std_logic_vector(7 downto 0);
    signal error      : std_logic := '0';

    -- Testbench file handling
    file golden_data : text open read_mode is "multiplier_golden_data.txt";
    variable line     : line;
    variable golden   : std_logic_vector(7 downto 0);

begin
    -- Read golden data from file
    while not endfile(golden_data) loop
        readline(golden_data, line);
        read(line, golden);
        A_tb <= golden(7 downto 4);
        B_tb <= golden(3 downto 0);
        wait for 10 ns;
        if P_tb /= golden then
            error <= '1';
        end if;
    end loop;

    -- Instantiate the Unit Under Test (UUT)
    UUT: multiplier port map (
        A => A_tb,
        B => B_tb,
        P => P_tb
    );

    -- Error checking process
    check_error: process
    begin
        wait for 100 ns;
        if error = '1' then
            report "Test failed: Output mismatch!" severity error;
        else
            report "Test passed: Output matches golden data!" severity note;
        end if;
        wait;
    end process;

end architecture tb_arch;

